{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "759d5288",
   "metadata": {},
   "outputs": [],
   "source": [
    "# %load guitar.py\n",
    "import random\n",
    "import math\n",
    "import time\n",
    "import Quantum_randomNum\n",
    "SAMPLE_RATE = 44100\n",
    "DECAY_FACTOR = 0.996\n",
    "\n",
    "\n",
    "class GuitarString:\n",
    "    def __init__(self, frequency):\n",
    "        if frequency <= 0:\n",
    "            raise ValueError(\"Frequency must be positive.\")\n",
    "        self.frequency = frequency\n",
    "        self.tic_time = 0\n",
    "        self.queue = [0] * int(round(SAMPLE_RATE / frequency))\n",
    "\n",
    "    def pluck(self):\n",
    "        for i in range(len(self.queue)):\n",
    "            self.queue[i] = generate_random_number(-0.5, 0.5)\n",
    "\n",
    "    def tic(self):\n",
    "        first = self.queue[0]\n",
    "        self.queue = self.queue[1:]\n",
    "        second = self.queue[0]\n",
    "        new_term = DECAY_FACTOR * 0.5 * (first + second)\n",
    "        self.queue.append(new_term)\n",
    "        self.tic_time += 1\n",
    "\n",
    "    def sample(self):\n",
    "        return self.queue[0]\n",
    "\n",
    "    def get_time(self):\n",
    "        return self.tic_time\n",
    "\n",
    "    def get_frequency(self):\n",
    "        return self.frequency"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "682dddee",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the name of the input file: song.txt\n",
      "Enter the name of the output file: first.txt\n",
      "Reading the input file and generating a .dat file for sox\n",
      "....Done.\n"
     ]
    }
   ],
   "source": [
    "# %load GuitarMusic.py\n",
    "\n",
    "SAMPLE_RATE = 44100\n",
    "import sys\n",
    "import math\n",
    "from guitar import GuitarString\n",
    "\n",
    "\n",
    "CONCERT_A = 440.0\n",
    "NUM_STRINGS = 37\n",
    "STEP = 1 / SAMPLE_RATE\n",
    "\n",
    "\n",
    "def open_files():\n",
    "    # open input data file\n",
    "    in_file_name = input(\"Enter the name of the input file: \")\n",
    "    try:\n",
    "        infile = open(in_file_name, \"r\")\n",
    "    except FileNotFoundError:\n",
    "        print(\"Error opening input data file\")\n",
    "        sys.exit(1)\n",
    "\n",
    "    # open output data file\n",
    "    out_file_name = input(\"Enter the name of the output file: \")\n",
    "    try:\n",
    "        outfile = open(out_file_name, \"w\")\n",
    "    except FileNotFoundError:\n",
    "        print(\"Error opening output data file\")\n",
    "        sys.exit(1)\n",
    "\n",
    "    return infile, outfile\n",
    "\n",
    "\n",
    "def close_files(infile, outfile):\n",
    "    infile.close()\n",
    "    outfile.close()\n",
    "\n",
    "\n",
    "def create_strings():\n",
    "    strings = []\n",
    "    for i in range(NUM_STRINGS):\n",
    "        factor = pow(2, (i - 24) / 12.0)\n",
    "        frequency = CONCERT_A * factor\n",
    "        string = GuitarString(frequency)\n",
    "        strings.append(string)\n",
    "    return strings\n",
    "\n",
    "\n",
    "def sum_samples(strings):\n",
    "    sample_sum = 0\n",
    "    for string in strings:\n",
    "        sample_sum += string.sample()\n",
    "    return sample_sum\n",
    "\n",
    "\n",
    "def process_file(strings, infile, outfile):\n",
    "    time_count = 0\n",
    "    for line in infile:\n",
    "        read_time, gtr_key = line.strip().split()\n",
    "        read_time = float(read_time)\n",
    "        gtr_key = int(gtr_key)\n",
    "\n",
    "        while time_count < read_time:\n",
    "            outfile.write(\"  \" + str(time_count) + \"\\t\" + str(sum_samples(strings)) + \"\\n\")\n",
    "            for string in strings:\n",
    "                string.tic()\n",
    "            time_count += STEP\n",
    "\n",
    "        if gtr_key == -1:\n",
    "            return\n",
    "\n",
    "        strings[gtr_key].pluck()\n",
    "        print(\".\", end=\"\")\n",
    "        sys.stdout.flush()\n",
    "\n",
    "\n",
    "def main():\n",
    "    strings = create_strings()\n",
    "    infile, outfile = open_files()\n",
    "\n",
    "    outfile.write(\"; Sample Rate \" + str(SAMPLE_RATE) + \"\\n\")\n",
    "    outfile.write(\"; Channels 1\\n\")\n",
    "\n",
    "    print(\"Reading the input file and generating a .dat file for sox\")\n",
    "\n",
    "    process_file(strings, infile, outfile)\n",
    "\n",
    "    close_files(infile, outfile)\n",
    "\n",
    "    print(\"Done.\")\n",
    "\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "21a830f2",
   "metadata": {},
   "outputs": [],
   "source": [
    "import qiskit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "28b47b39",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Random number between 5 and -5 : 2.6357\n"
     ]
    }
   ],
   "source": [
    "# %load Quantum_randomNum.py\n",
    "from qiskit import QuantumCircuit, execute, Aer\n",
    "\n",
    "def generate_random_number(start, end):\n",
    "    \n",
    "    random = 0.0\n",
    "    n = 5\n",
    "    \n",
    "    \n",
    "\n",
    "    for p in range(n):\n",
    "\n",
    "            # Determine the number of qubits required to represent the range\n",
    "        num_qubits = len(bin(end - 2)[2:])\n",
    "\n",
    "            # Create a quantum circuit with the necessary number of qubits\n",
    "        qc = QuantumCircuit(num_qubits, num_qubits)\n",
    "\n",
    "            # Apply Hadamard gates to create a superposition of all possible values\n",
    "        for i in range(num_qubits):\n",
    "            qc.h(i)\n",
    "\n",
    "            # Apply a series of controlled-X gates to set the range\n",
    "        for i in range(num_qubits - 2):\n",
    "            qc.ccx(i, i + 1, num_qubits - 1)\n",
    "\n",
    "            # Measure the qubits\n",
    "        qc.measure(range(num_qubits), range(num_qubits))\n",
    "\n",
    "            # Set up the backend for simulation\n",
    "        backend = Aer.get_backend('qasm_simulator')\n",
    "\n",
    "            # Execute the circuit and get the results\n",
    "        job = execute(qc, backend, shots=1)\n",
    "        result = job.result()\n",
    "        counts = result.get_counts(qc)\n",
    "\n",
    "            # Extract the random number and map it to the desired range\n",
    "        random_number = int(list(counts.keys())[0], 2)\n",
    "        random_number = start + random_number % (end - start) \n",
    "        \n",
    "        \n",
    "        random =  random + random_number * 10 ** (-p)\n",
    "    \n",
    "    \n",
    "    return \"{:.{}f}\".format(random, 4)\n",
    "# Example usage\n",
    "\n",
    "# start = 5\n",
    "# end = -5\n",
    "# random_number = generate_random_number(start, end)\n",
    "# print(\"Random number between\", start, \"and\", end, \":\", random_number)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "868e1edc",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b3ce0a09",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7afe5dab",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
